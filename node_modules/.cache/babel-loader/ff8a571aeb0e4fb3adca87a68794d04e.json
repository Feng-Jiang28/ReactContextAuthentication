{"ast":null,"code":"var _jsxFileName = \"/Users/jiang_feng/Downloads/01-starting-project/src/components/context/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // create a context object:\n//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  });\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyway\n    localStorage.setItem('IsLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: prop.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","onLogin","email","password","AuthContextProvider","props","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","prop","children"],"sources":["/Users/jiang_feng/Downloads/01-starting-project/src/components/context/auth-context.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\n\n// create a context object:\n//\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {},\n    onLogin: (email, password)=>{}\n});\n\nexport const AuthContextProvider = (props) => {\n\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    useEffect(()=>{\n        const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n        if(storedUserLoggedInInformation === '1'){\n            setIsLoggedIn(true);\n        }\n    })\n    const loginHandler = (email, password) => {\n        // We should of course check email and password\n        // But it's just a dummy/ demo anyway\n        localStorage.setItem('IsLoggedIn', '1');\n        setIsLoggedIn(true);\n    };\n\n    const logoutHandler = () => {\n        localStorage.removeItem('isLoggedIn')\n        setIsLoggedIn(false);\n    };\n\n    return <AuthContext.Provider value={{\n        isLoggedIn: isLoggedIn,\n        onLogout:logoutHandler,\n        onLogin: loginHandler\n    }}>\n        {prop.children}\n    </AuthContext.Provider>\n\n}\n\nexport default AuthContext;\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CAEA;AACA;;;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACpCC,UAAU,EAAE,KADwB;EAEpCC,QAAQ,EAAE,MAAM,CAAE,CAFkB;EAGpCC,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAmB,CAAE;AAHM,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAAA;;EAE1C,MAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;EACAD,SAAS,CAAC,MAAI;IACV,MAAMY,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;IAEA,IAAGF,6BAA6B,KAAK,GAArC,EAAyC;MACrCD,aAAa,CAAC,IAAD,CAAb;IACH;EACJ,CANQ,CAAT;;EAOA,MAAMI,YAAY,GAAG,CAACR,KAAD,EAAQC,QAAR,KAAqB;IACtC;IACA;IACAK,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAL,aAAa,CAAC,IAAD,CAAb;EACH,CALD;;EAOA,MAAMM,aAAa,GAAG,MAAM;IACxBJ,YAAY,CAACK,UAAb,CAAwB,YAAxB;IACAP,aAAa,CAAC,KAAD,CAAb;EACH,CAHD;;EAKA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAChCP,UAAU,EAAEA,UADoB;MAEhCC,QAAQ,EAACY,aAFuB;MAGhCX,OAAO,EAAES;IAHuB,CAA7B;IAAA,UAKFI,IAAI,CAACC;EALH;IAAA;IAAA;IAAA;EAAA,QAAP;AAQH,CA9BM;;GAAMX,mB;;KAAAA,mB;AAgCb,eAAeP,WAAf"},"metadata":{},"sourceType":"module"}