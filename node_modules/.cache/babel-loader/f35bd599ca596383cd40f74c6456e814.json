{"ast":null,"code":"var _jsxFileName = \"/Users/jiang_feng/Downloads/01-starting-project/src/components/context/auth-context.js\";\nimport React, { useEffect, useState } from \"react\"; // create a context object:\n//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nconst [isLoggedIn, setIsLoggedIn] = useState(false);\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n\n  if (storedUserLoggedInInformation === '1') {\n    setIsLoggedIn(true);\n  }\n}, []); // run after the other component runs， run once and run again if dependency changed.\n\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyway\n  localStorage.setItem('IsLoggedIn', '1');\n  setIsLoggedIn(true);\n};\n\nconst logoutHandler = () => {\n  localStorage.removeItem('isLoggedIn');\n  setIsLoggedIn(false);\n};\n\nexport default /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n  value: {\n    isLoggedIn: isLoggedIn,\n    onLogin: loginHandler,\n    onLogout: logoutHandler\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 5\n}, this);","map":{"version":3,"names":["React","useEffect","useState","AuthContext","createContext","isLoggedIn","onLogout","setIsLoggedIn","storedUserLoggedInInformation","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem","onLogin"],"sources":["/Users/jiang_feng/Downloads/01-starting-project/src/components/context/auth-context.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\n\n// create a context object:\n//\nconst AuthContext = React.createContext({\n    isLoggedIn: false,\n    onLogout: () => {}\n});\n\nconst [isLoggedIn, setIsLoggedIn] = useState(false);\n\nuseEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('IsLoggedIn');\n    if(storedUserLoggedInInformation === '1'){\n        setIsLoggedIn(true);\n    }\n}, []); // run after the other component runs， run once and run again if dependency changed.\n\nconst loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyway\n    localStorage.setItem('IsLoggedIn', '1');\n    setIsLoggedIn(true);\n};\n\nconst logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn')\n    setIsLoggedIn(false);\n};\n\nexport default\n    <AuthContext.Provider value={{\n        isLoggedIn: isLoggedIn,\n        onLogin: loginHandler,\n        onLogout: logoutHandler\n    }}/>;\n\n\n"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CAEA;AACA;;;AACA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;EACpCC,UAAU,EAAE,KADwB;EAEpCC,QAAQ,EAAE,MAAM,CAAE;AAFkB,CAApB,CAApB;AAKA,MAAM,CAACD,UAAD,EAAaE,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEAD,SAAS,CAAC,MAAM;EACZ,MAAMO,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;EACA,IAAGF,6BAA6B,KAAK,GAArC,EAAyC;IACrCD,aAAa,CAAC,IAAD,CAAb;EACH;AACJ,CALQ,EAKN,EALM,CAAT,C,CAKQ;;AAER,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACtC;EACA;EACAJ,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;EACAP,aAAa,CAAC,IAAD,CAAb;AACH,CALD;;AAOA,MAAMQ,aAAa,GAAG,MAAM;EACxBN,YAAY,CAACO,UAAb,CAAwB,YAAxB;EACAT,aAAa,CAAC,KAAD,CAAb;AACH,CAHD;;AAKA,4BACI,QAAC,WAAD,CAAa,QAAb;EAAsB,KAAK,EAAE;IACzBF,UAAU,EAAEA,UADa;IAEzBY,OAAO,EAAEN,YAFgB;IAGzBL,QAAQ,EAAES;EAHe;AAA7B;EAAA;EAAA;EAAA;AAAA,QADJ"},"metadata":{},"sourceType":"module"}